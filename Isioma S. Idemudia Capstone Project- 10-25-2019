{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Vancouver Crime Prediction -ISOMA IDEMUDIA\n",
    "\n",
    "_**From Crime Data to Classification with Gradient Boosted Trees: Supervised Machine Learning on Historical Data**_\n",
    "\n",
    "---\n",
    "\n",
    "The prediction of crimes is an important application of machine learning for societal benefit, but can also lead to dangerous biases. In this example, we demonstrate the first step in using historical data to predict vehicle theft based on 3 factors (features): Location, time of day, and month of the year. \n",
    "\n",
    "---\n",
    "\n",
    "\n",
    "## Background\n",
    "The Vancouver, British Columbia public dataset contains a variety of data for analysis of city activities and conditions. \n",
    "* http://data.vancouver.ca/datacatalogue/crime-data-details.htm\n",
    "    \n",
    "In addition, i need Vancouver census data to calculate the crime *rate* in each neighborhood to normalize our predictions to be independent of population. \n",
    "* http://vancouver.ca/your-government/2001---2011-census-local-area-profiles.aspx\n",
    "\n",
    "I will train and test the model on the baseline data (vehicle thefts in 2006), and then test the models predict at a future time (2008).\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from IPython.display import display   # To print DataFrames nicely\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt \n",
    "from IPython.core.pylabtools import figsize  # to choose figure size\n",
    "import seaborn as sns                   # Pretty graphing commands\n",
    "sns.set_style(\"white\")\n",
    "sns.set_style(\"ticks\")\n",
    "import boto3\n",
    "import io"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Extraction\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Start by downloading the crime dataset from the Vancouver, British Columbia public database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2019-10-25 07:06:37--  ftp://webftp.vancouver.ca/opendata/csv/crime_csv_all_years.zip\n",
      "           => ‘crime_csv_all_years.zip.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/csv ... done.\n",
      "==> SIZE crime_csv_all_years.zip ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR crime_csv_all_years.zip ... done.\n",
      "\n",
      "crime_csv_all_years     [      <=>           ]   8.68M  7.45MB/s    in 1.2s    \n",
      "\n",
      "2019-10-25 07:06:39 (7.45 MB/s) - ‘crime_csv_all_years.zip.1’ saved [9107123]\n",
      "\n",
      "Archive:  crime_csv_all_years.zip\n",
      "  inflating: crime_csv_all_years.csv  \n",
      "  inflating: legal_disclaimer.txt    \n"
     ]
    }
   ],
   "source": [
    "!wget ftp://webftp.vancouver.ca/opendata/csv/crime_csv_all_years.zip\n",
    "!unzip -o crime_csv_all_years.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next download the census data from the Vancouver government site."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2019-10-25 07:06:40--  ftp://webftp.vancouver.ca/opendata/csv/CensusLocalAreaProfiles2001.csv\n",
      "           => ‘CensusLocalAreaProfiles2001.csv.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/csv ... done.\n",
      "==> SIZE CensusLocalAreaProfiles2001.csv ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR CensusLocalAreaProfiles2001.csv ... done.\n",
      "\n",
      "CensusLocalAreaProf     [  <=>               ] 210.84K   805KB/s    in 0.3s    \n",
      "\n",
      "2019-10-25 07:06:40 (805 KB/s) - ‘CensusLocalAreaProfiles2001.csv.1’ saved [215902]\n",
      "\n",
      "--2019-10-25 07:06:41--  ftp://webftp.vancouver.ca/opendata/csv/CensusLocalAreaProfiles2006.csv\n",
      "           => ‘CensusLocalAreaProfiles2006.csv.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/csv ... done.\n",
      "==> SIZE CensusLocalAreaProfiles2006.csv ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR CensusLocalAreaProfiles2006.csv ... done.\n",
      "\n",
      "CensusLocalAreaProf     [  <=>               ] 435.84K  1.17MB/s    in 0.4s    \n",
      "\n",
      "2019-10-25 07:06:42 (1.17 MB/s) - ‘CensusLocalAreaProfiles2006.csv.1’ saved [446305]\n",
      "\n",
      "--2019-10-25 07:06:42--  ftp://webftp.vancouver.ca/opendata/csv/CensusLocalAreaProfiles2011.csv\n",
      "           => ‘CensusLocalAreaProfiles2011.csv.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/csv ... done.\n",
      "==> SIZE CensusLocalAreaProfiles2011.csv ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR CensusLocalAreaProfiles2011.csv ... done.\n",
      "\n",
      "CensusLocalAreaProf     [  <=>               ] 236.17K   898KB/s    in 0.3s    \n",
      "\n",
      "2019-10-25 07:06:43 (898 KB/s) - ‘CensusLocalAreaProfiles2011.csv.1’ saved [241841]\n",
      "\n",
      "--2019-10-25 07:06:43--  ftp://webftp.vancouver.ca/opendata/xls/CensusLocalAreaProfiles2001.xls\n",
      "           => ‘CensusLocalAreaProfiles2001.xls.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/xls ... done.\n",
      "==> SIZE CensusLocalAreaProfiles2001.xls ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR CensusLocalAreaProfiles2001.xls ... done.\n",
      "\n",
      "CensusLocalAreaProf     [  <=>               ] 319.00K  1.02MB/s    in 0.3s    \n",
      "\n",
      "2019-10-25 07:06:44 (1.02 MB/s) - ‘CensusLocalAreaProfiles2001.xls.1’ saved [326656]\n",
      "\n",
      "--2019-10-25 07:06:44--  ftp://webftp.vancouver.ca/opendata/xls/CensusLocalAreaProfiles2006.xls\n",
      "           => ‘CensusLocalAreaProfiles2006.xls.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/xls ... done.\n",
      "==> SIZE CensusLocalAreaProfiles2006.xls ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR CensusLocalAreaProfiles2006.xls ... done.\n",
      "\n",
      "CensusLocalAreaProf     [  <=>               ] 494.00K  1.21MB/s    in 0.4s    \n",
      "\n",
      "2019-10-25 07:06:45 (1.21 MB/s) - ‘CensusLocalAreaProfiles2006.xls.1’ saved [505856]\n",
      "\n",
      "--2019-10-25 07:06:45--  ftp://webftp.vancouver.ca/opendata/xls/CensusLocalAreaProfiles2011.xls\n",
      "           => ‘CensusLocalAreaProfiles2011.xls.1’\n",
      "Resolving webftp.vancouver.ca... 199.175.219.218\n",
      "Connecting to webftp.vancouver.ca|199.175.219.218|:21... connected.\n",
      "Logging in as anonymous ... Logged in!\n",
      "==> SYST ... done.    ==> PWD ... done.\n",
      "==> TYPE I ... done.  ==> CWD (1) /opendata/xls ... done.\n",
      "==> SIZE CensusLocalAreaProfiles2011.xls ... done.\n",
      "\n",
      "==> PASV ... done.    ==> RETR CensusLocalAreaProfiles2011.xls ... done.\n",
      "\n",
      "CensusLocalAreaProf     [  <=>               ] 305.00K   964KB/s    in 0.3s    \n",
      "\n",
      "2019-10-25 07:06:46 (964 KB/s) - ‘CensusLocalAreaProfiles2011.xls.1’ saved [312320]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget ftp://webftp.vancouver.ca/opendata/csv/CensusLocalAreaProfiles2001.csv\n",
    "!wget ftp://webftp.vancouver.ca/opendata/csv/CensusLocalAreaProfiles2006.csv\n",
    "!wget ftp://webftp.vancouver.ca/opendata/csv/CensusLocalAreaProfiles2011.csv\n",
    "!wget ftp://webftp.vancouver.ca/opendata/xls/CensusLocalAreaProfiles2001.xls\n",
    "!wget ftp://webftp.vancouver.ca/opendata/xls/CensusLocalAreaProfiles2006.xls\n",
    "!wget ftp://webftp.vancouver.ca/opendata/xls/CensusLocalAreaProfiles2011.xls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Upload the data to the S3 bucket."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Ingestion and Preparation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(613900, 10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TYPE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>DAY</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>MINUTE</th>\n",
       "      <th>HUNDRED_BLOCK</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>X</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Break and Enter Residential/Other</td>\n",
       "      <td>2003</td>\n",
       "      <td>12</td>\n",
       "      <td>7</td>\n",
       "      <td>21.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>36XX E 47TH AVE</td>\n",
       "      <td>Killarney</td>\n",
       "      <td>498148.47</td>\n",
       "      <td>5452617.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Break and Enter Residential/Other</td>\n",
       "      <td>2003</td>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16XX GRANT ST</td>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>494890.46</td>\n",
       "      <td>5457626.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2003</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>11.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>19XX W 11TH AVE</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>489121.18</td>\n",
       "      <td>5456575.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2003</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19XX VINE ST</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>488546.95</td>\n",
       "      <td>5457304.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2003</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>17.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>19XX VINE ST</td>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>488546.95</td>\n",
       "      <td>5457304.88</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                TYPE  YEAR  MONTH  DAY  HOUR  MINUTE  \\\n",
       "0  Break and Enter Residential/Other  2003     12    7  21.0    30.0   \n",
       "1  Break and Enter Residential/Other  2003      2    9  18.0     0.0   \n",
       "2                 Theft from Vehicle  2003      1    8  11.0    45.0   \n",
       "3                 Theft from Vehicle  2003      3   20  18.0     0.0   \n",
       "4                 Theft from Vehicle  2003      2   19  17.0    30.0   \n",
       "\n",
       "     HUNDRED_BLOCK       NEIGHBOURHOOD          X           Y  \n",
       "0  36XX E 47TH AVE           Killarney  498148.47  5452617.84  \n",
       "1    16XX GRANT ST  Grandview-Woodland  494890.46  5457626.75  \n",
       "2  19XX W 11TH AVE           Kitsilano  489121.18  5456575.35  \n",
       "3     19XX VINE ST           Kitsilano  488546.95  5457304.88  \n",
       "4     19XX VINE ST           Kitsilano  488546.95  5457304.88  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_all_years = pd.read_csv('crime_csv_all_years.csv')\n",
    "print(crime_all_years.shape)\n",
    "crime_all_years.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To investigate the stability of the crimes over time, plot the different crime types over the years."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "year_type = pd.crosstab(index=crime_all_years['TYPE'],columns=crime_all_years['YEAR'])\n",
    "fig = plt.figure(figsize=(10, 8))\n",
    "ax = fig.add_subplot(111)\n",
    "for i in range(len(year_type.index)):\n",
    "    plt.plot(year_type.columns,year_type.iloc[i],label = '%s'%year_type.index[i])\n",
    "plt.legend()\n",
    "ticks = [y for y in range(2003,2017)]\n",
    "plt.xlim(2003,2017)\n",
    "ax.set_xticks(ticks);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load census data\n",
    "The census data will be used to normalized the crime rate for supervised training of XGBoost models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>Total_population_by_age_groups</th>\n",
       "      <th>0_to_4_years</th>\n",
       "      <th>5_to_9_years</th>\n",
       "      <th>10_to_14_years</th>\n",
       "      <th>15_to_19_years</th>\n",
       "      <th>15_years</th>\n",
       "      <th>16_years</th>\n",
       "      <th>17_years</th>\n",
       "      <th>18_years</th>\n",
       "      <th>...</th>\n",
       "      <th>Ukrainian</th>\n",
       "      <th>Urdu</th>\n",
       "      <th>Vietnamese</th>\n",
       "      <th>Yiddish</th>\n",
       "      <th>Other_languages</th>\n",
       "      <th>Multiple_responses</th>\n",
       "      <th>English_and_French</th>\n",
       "      <th>English_and_non-official_language</th>\n",
       "      <th>French_and_non-official_language</th>\n",
       "      <th>English,_French_and_non-official_language</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arbutus-Ridge</td>\n",
       "      <td>15910</td>\n",
       "      <td>570</td>\n",
       "      <td>705</td>\n",
       "      <td>1040</td>\n",
       "      <td>1365</td>\n",
       "      <td>255</td>\n",
       "      <td>300</td>\n",
       "      <td>310</td>\n",
       "      <td>255</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Downtown</td>\n",
       "      <td>54690</td>\n",
       "      <td>1840</td>\n",
       "      <td>875</td>\n",
       "      <td>670</td>\n",
       "      <td>1210</td>\n",
       "      <td>165</td>\n",
       "      <td>155</td>\n",
       "      <td>175</td>\n",
       "      <td>285</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>30</td>\n",
       "      <td>55</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>21745</td>\n",
       "      <td>930</td>\n",
       "      <td>1355</td>\n",
       "      <td>1545</td>\n",
       "      <td>1665</td>\n",
       "      <td>305</td>\n",
       "      <td>335</td>\n",
       "      <td>345</td>\n",
       "      <td>360</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "      <td>5</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fairview</td>\n",
       "      <td>31445</td>\n",
       "      <td>1080</td>\n",
       "      <td>615</td>\n",
       "      <td>525</td>\n",
       "      <td>615</td>\n",
       "      <td>95</td>\n",
       "      <td>110</td>\n",
       "      <td>100</td>\n",
       "      <td>140</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>80</td>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>27305</td>\n",
       "      <td>1190</td>\n",
       "      <td>905</td>\n",
       "      <td>830</td>\n",
       "      <td>935</td>\n",
       "      <td>200</td>\n",
       "      <td>185</td>\n",
       "      <td>175</td>\n",
       "      <td>170</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>55</td>\n",
       "      <td>5</td>\n",
       "      <td>15</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 1246 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        NEIGHBOURHOOD Total_population_by_age_groups 0_to_4_years  \\\n",
       "1       Arbutus-Ridge                          15910          570   \n",
       "2            Downtown                          54690         1840   \n",
       "3   Dunbar-Southlands                          21745          930   \n",
       "4            Fairview                          31445         1080   \n",
       "5  Grandview-Woodland                          27305         1190   \n",
       "\n",
       "  5_to_9_years 10_to_14_years 15_to_19_years 15_years 16_years 17_years  \\\n",
       "1          705           1040           1365      255      300      310   \n",
       "2          875            670           1210      165      155      175   \n",
       "3         1355           1545           1665      305      335      345   \n",
       "4          615            525            615       95      110      100   \n",
       "5          905            830            935      200      185      175   \n",
       "\n",
       "  18_years  ... Ukrainian Urdu Vietnamese Yiddish Other_languages  \\\n",
       "1      255  ...         0    0          0       5               5   \n",
       "2      285  ...        15    5         50       0              20   \n",
       "3      360  ...         0    0          5       0              15   \n",
       "4      140  ...        15    0          5       5              15   \n",
       "5      170  ...        10    5         60       0              40   \n",
       "\n",
       "  Multiple_responses English_and_French English_and_non-official_language  \\\n",
       "1                 35                  0                                15   \n",
       "2                200                 30                                55   \n",
       "3                 40                  5                                20   \n",
       "4                 80                 10                                25   \n",
       "5                 55                  5                                15   \n",
       "\n",
       "  French_and_non-official_language English,_French_and_non-official_language  \n",
       "1                               15                                         0  \n",
       "2                              115                                         0  \n",
       "3                               20                                         0  \n",
       "4                               45                                         0  \n",
       "5                               40                                         0  \n",
       "\n",
       "[5 rows x 1246 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "census_years = ['2001','2006','2011']\n",
    "census_data = {}\n",
    "for yr in census_years:\n",
    "    temp_census = pd.read_excel('CensusLocalAreaProfiles'+yr+'.xls').T.reset_index(drop=True)\n",
    "    temp_census.iloc[0,3] = 'NEIGHBOURHOOD'\n",
    "    census_data[yr] = temp_census.rename(columns=temp_census.iloc[0]).iloc[1:,3:]\n",
    "    census_data[yr].columns = census_data[yr].columns.str.strip().str.replace(' ', '_')\n",
    "#     census_data[yr] = temp_census.loc[:,~temp_census.columns.duplicated()]\n",
    "#     census_data[yr] = census_data[yr].rename(columns=temp_census.iloc[0]).iloc[1:,3:1249]\n",
    "\n",
    "census_data[yr].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After inspecting the data, we find the column names for the total population in each data year. We can now generate a data frame with the population data for each neighborhood."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>Total_Popul_2001</th>\n",
       "      <th>Total_Popul_2006</th>\n",
       "      <th>Total_Popul_2011</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arbutus-Ridge</td>\n",
       "      <td>14515</td>\n",
       "      <td>16145</td>\n",
       "      <td>15910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Downtown</td>\n",
       "      <td>27990</td>\n",
       "      <td>43415</td>\n",
       "      <td>54690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>21310</td>\n",
       "      <td>21480</td>\n",
       "      <td>21745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Fairview</td>\n",
       "      <td>28405</td>\n",
       "      <td>29295</td>\n",
       "      <td>31445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>29085</td>\n",
       "      <td>28205</td>\n",
       "      <td>27305</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        NEIGHBOURHOOD Total_Popul_2001 Total_Popul_2006 Total_Popul_2011\n",
       "1       Arbutus-Ridge            14515            16145            15910\n",
       "2            Downtown            27990            43415            54690\n",
       "3   Dunbar-Southlands            21310            21480            21745\n",
       "4            Fairview            28405            29295            31445\n",
       "5  Grandview-Woodland            29085            28205            27305"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot_popul_keys = {}\n",
    "tot_popul_keys['2001'] = 'Total_population_by_sex_and_age_groups_-_100%_data'\n",
    "tot_popul_keys['2006'] = 'Male_&_Female,_Total'\n",
    "tot_popul_keys['2011'] = 'Total_population_by_age_groups'\n",
    "tot_popul_year = census_data['2011'].iloc[:,:2].copy()\n",
    "for yr in census_years:\n",
    "    tot_popul_year['Total_Popul_'+yr] = census_data[yr][tot_popul_keys[yr]]#.str.replace(',', '').astype(float)\n",
    "tot_popul_year = tot_popul_year.drop(tot_popul_keys['2011'],axis=1)\n",
    "tot_popul_year.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By plotting the census data over the 3 years we observe that the growth is fairly linear in each neighborhood. We coudl leverage this observation to interpolate the population in each neighborhood to for each year we have crime data. However, in the following we will train on data from 2006 and predict the crime rate in 2011."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,5))\n",
    "for idx in tot_popul_year.index[:-3]:\n",
    "    plt.plot([2001,2006,2011], tot_popul_year.iloc[idx,1:], label=tot_popul_year.iloc[idx,0] )\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the intersection of the neighborhood names in the two datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Dunbar-Southlands',\n",
       " 'Fairview',\n",
       " 'Grandview-Woodland',\n",
       " 'Hastings-Sunrise',\n",
       " 'Kensington-Cedar Cottage',\n",
       " 'Kerrisdale',\n",
       " 'Killarney',\n",
       " 'Kitsilano',\n",
       " 'Marpole',\n",
       " 'Mount Pleasant',\n",
       " 'Oakridge',\n",
       " 'Renfrew-Collingwood',\n",
       " 'Riley Park',\n",
       " 'Shaughnessy',\n",
       " 'South Cambie',\n",
       " 'Strathcona',\n",
       " 'Sunset',\n",
       " 'Victoria-Fraserview',\n",
       " 'West End',\n",
       " 'West Point Grey']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neighborhoods = list(set(crime_all_years['NEIGHBOURHOOD'].unique()).intersection(\n",
    "                        set(census_data[yr]['NEIGHBOURHOOD'].unique()))-set([np.nan]))\n",
    "neighborhoods.sort()\n",
    "neighborhoods"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reduce the neighborhoods in the population data frame to those that are also in the crime database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>Total_Popul_2001</th>\n",
       "      <th>Total_Popul_2006</th>\n",
       "      <th>Total_Popul_2011</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Dunbar-Southlands</td>\n",
       "      <td>21310</td>\n",
       "      <td>21480</td>\n",
       "      <td>21745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Fairview</td>\n",
       "      <td>28405</td>\n",
       "      <td>29295</td>\n",
       "      <td>31445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Grandview-Woodland</td>\n",
       "      <td>29085</td>\n",
       "      <td>28205</td>\n",
       "      <td>27305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hastings-Sunrise</td>\n",
       "      <td>33045</td>\n",
       "      <td>33130</td>\n",
       "      <td>33990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kensington-Cedar Cottage</td>\n",
       "      <td>44560</td>\n",
       "      <td>44665</td>\n",
       "      <td>47470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>14035</td>\n",
       "      <td>14615</td>\n",
       "      <td>14735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Killarney</td>\n",
       "      <td>25785</td>\n",
       "      <td>27180</td>\n",
       "      <td>28450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Kitsilano</td>\n",
       "      <td>39620</td>\n",
       "      <td>40595</td>\n",
       "      <td>41375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Marpole</td>\n",
       "      <td>22415</td>\n",
       "      <td>23785</td>\n",
       "      <td>23835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Mount Pleasant</td>\n",
       "      <td>24535</td>\n",
       "      <td>23615</td>\n",
       "      <td>26400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Oakridge</td>\n",
       "      <td>11795</td>\n",
       "      <td>12725</td>\n",
       "      <td>12440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Renfrew-Collingwood</td>\n",
       "      <td>44950</td>\n",
       "      <td>48885</td>\n",
       "      <td>50505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Riley Park</td>\n",
       "      <td>21990</td>\n",
       "      <td>21815</td>\n",
       "      <td>21795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Shaughnessy</td>\n",
       "      <td>9020</td>\n",
       "      <td>8900</td>\n",
       "      <td>8805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>South Cambie</td>\n",
       "      <td>6995</td>\n",
       "      <td>7070</td>\n",
       "      <td>7675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Strathcona</td>\n",
       "      <td>11575</td>\n",
       "      <td>11920</td>\n",
       "      <td>12165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Sunset</td>\n",
       "      <td>33425</td>\n",
       "      <td>35230</td>\n",
       "      <td>36285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Victoria-Fraserview</td>\n",
       "      <td>27150</td>\n",
       "      <td>29200</td>\n",
       "      <td>30710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>West End</td>\n",
       "      <td>42120</td>\n",
       "      <td>44560</td>\n",
       "      <td>44540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>West Point Grey</td>\n",
       "      <td>12680</td>\n",
       "      <td>12990</td>\n",
       "      <td>12795</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               NEIGHBOURHOOD Total_Popul_2001 Total_Popul_2006  \\\n",
       "0          Dunbar-Southlands            21310            21480   \n",
       "1                   Fairview            28405            29295   \n",
       "2         Grandview-Woodland            29085            28205   \n",
       "3           Hastings-Sunrise            33045            33130   \n",
       "4   Kensington-Cedar Cottage            44560            44665   \n",
       "5                 Kerrisdale            14035            14615   \n",
       "6                  Killarney            25785            27180   \n",
       "7                  Kitsilano            39620            40595   \n",
       "8                    Marpole            22415            23785   \n",
       "9             Mount Pleasant            24535            23615   \n",
       "10                  Oakridge            11795            12725   \n",
       "11       Renfrew-Collingwood            44950            48885   \n",
       "12                Riley Park            21990            21815   \n",
       "13               Shaughnessy             9020             8900   \n",
       "14              South Cambie             6995             7070   \n",
       "15                Strathcona            11575            11920   \n",
       "16                    Sunset            33425            35230   \n",
       "17       Victoria-Fraserview            27150            29200   \n",
       "18                  West End            42120            44560   \n",
       "19           West Point Grey            12680            12990   \n",
       "\n",
       "   Total_Popul_2011  \n",
       "0             21745  \n",
       "1             31445  \n",
       "2             27305  \n",
       "3             33990  \n",
       "4             47470  \n",
       "5             14735  \n",
       "6             28450  \n",
       "7             41375  \n",
       "8             23835  \n",
       "9             26400  \n",
       "10            12440  \n",
       "11            50505  \n",
       "12            21795  \n",
       "13             8805  \n",
       "14             7675  \n",
       "15            12165  \n",
       "16            36285  \n",
       "17            30710  \n",
       "18            44540  \n",
       "19            12795  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot_popul_year = tot_popul_year[tot_popul_year['NEIGHBOURHOOD'].isin(neighborhoods)]\n",
    "tot_popul_year = tot_popul_year.reset_index(drop=True)\n",
    "tot_popul_year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Narrow the crime dataset to the features of interest (`YEAR`, `MONTH`, `HOUR`, `NEIGHBOURHOOD`) and the type of crime, and use only the neighbourhoods and years that are shared with the census data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points: 46867\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TYPE</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>143889</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "      <td>Killarney</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143891</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2006</td>\n",
       "      <td>12</td>\n",
       "      <td>17.0</td>\n",
       "      <td>South Cambie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143892</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2006</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>South Cambie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143893</th>\n",
       "      <td>Theft from Vehicle</td>\n",
       "      <td>2006</td>\n",
       "      <td>12</td>\n",
       "      <td>16.0</td>\n",
       "      <td>South Cambie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>143894</th>\n",
       "      <td>Mischief</td>\n",
       "      <td>2006</td>\n",
       "      <td>12</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Kitsilano</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      TYPE  YEAR  MONTH  HOUR NEIGHBOURHOOD\n",
       "143889  Theft from Vehicle  2006      1  22.0     Killarney\n",
       "143891  Theft from Vehicle  2006     12  17.0  South Cambie\n",
       "143892  Theft from Vehicle  2006     12   0.0  South Cambie\n",
       "143893  Theft from Vehicle  2006     12  16.0  South Cambie\n",
       "143894            Mischief  2006     12  20.0     Kitsilano"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_data_keys = ['TYPE', 'YEAR', 'MONTH', 'HOUR', 'NEIGHBOURHOOD']\n",
    "crime_census_years = crime_all_years[crime_all_years['YEAR'].isin([2001,2006,2011])][crime_data_keys]\n",
    "crime_census_years = crime_census_years[crime_census_years['NEIGHBOURHOOD'].isin(neighborhoods)]\n",
    "crime_census_years.dropna(inplace=True)\n",
    "print('Number of data points:', crime_census_years.shape[0])\n",
    "crime_census_years.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "List the types of crimes in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1fc59048>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "crime_census_years['TYPE'].value_counts().plot('barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Selet the crime (Theft of Vehicle) that will be modeled in the following. Then, count the number of occurances of that crime for each of the feature values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data points: 2889\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>events</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Hastings-Sunrise</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kensington-Cedar Cottage</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Killarney</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR  MONTH  HOUR             NEIGHBOURHOOD  events\n",
       "0  2006      1   0.0                  Fairview       4\n",
       "1  2006      1   0.0          Hastings-Sunrise       2\n",
       "2  2006      1   0.0  Kensington-Cedar Cottage       1\n",
       "3  2006      1   0.0                Kerrisdale       1\n",
       "4  2006      1   0.0                 Killarney       2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime = 'Theft of Vehicle'\n",
    "crime_census_years = crime_census_years[crime_census_years['TYPE']==crime]\n",
    "crime_events = crime_census_years.groupby(['YEAR', 'MONTH', 'HOUR', 'NEIGHBOURHOOD']).size().reset_index(name='events')\n",
    "print('Number of data points:', crime_events.shape[0])\n",
    "crime_events.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate the crime rate per 10,000 residents in each neighborhood for each year, month. and hour."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>1.365421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Hastings-Sunrise</td>\n",
       "      <td>0.603682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kensington-Cedar Cottage</td>\n",
       "      <td>0.223889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>0.684229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Killarney</td>\n",
       "      <td>0.735835</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR  MONTH  HOUR             NEIGHBOURHOOD      rate\n",
       "0  2006      1   0.0                  Fairview  1.365421\n",
       "1  2006      1   0.0          Hastings-Sunrise  0.603682\n",
       "2  2006      1   0.0  Kensington-Cedar Cottage  0.223889\n",
       "3  2006      1   0.0                Kerrisdale  0.684229\n",
       "4  2006      1   0.0                 Killarney  0.735835"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crime_rate = crime_events.copy().rename(columns={'events': 'rate'})\n",
    "for idx in crime_events.index:\n",
    "    yr = crime_events.loc[idx,'YEAR']\n",
    "    nbhd = crime_events.loc[idx,'NEIGHBOURHOOD']\n",
    "    popul = tot_popul_year[tot_popul_year['NEIGHBOURHOOD']==nbhd]['Total_Popul_'+str(yr)].values[0]\n",
    "    crime_rate.loc[idx,'rate'] = crime_events.loc[idx,'events']/popul*10000\n",
    "crime_rate.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now wish to divide the crime rates into 3 categories (low, medium, high) for classification. We first display the statistics of the data, and histogram of the crime rates, to decide the divisions. But ultimately, the simplest choice is to divide the data into 3 nearly equal numbers of values to maintain balanced for optimal model training.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    2889.000000\n",
       "mean        0.546684\n",
       "std         0.375340\n",
       "min         0.198000\n",
       "25%         0.301841\n",
       "50%         0.420433\n",
       "75%         0.735835\n",
       "max         4.243281\n",
       "Name: rate, dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(crime_rate['rate'].describe())\n",
    "rate_median = crime_rate['rate'].median()\n",
    "crime_rate['rate'].hist(bins=70, figsize=(12,3))\n",
    "plt.axvline(x=edge, color='k')\n",
    "plt.text(edge,500,'edge',rotation=-90)\n",
    "plt.xlabel('Crime rate')\n",
    "plt.ylabel('Number of data points');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Replace the crime rates with the category values. The values (0,1)=(low, high). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Fairview</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Hastings-Sunrise</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kensington-Cedar Cottage</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Kerrisdale</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Killarney</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR  MONTH  HOUR             NEIGHBOURHOOD  rate\n",
       "0  2006      1   0.0                  Fairview   1.0\n",
       "1  2006      1   0.0          Hastings-Sunrise   1.0\n",
       "2  2006      1   0.0  Kensington-Cedar Cottage   0.0\n",
       "3  2006      1   0.0                Kerrisdale   1.0\n",
       "4  2006      1   0.0                 Killarney   1.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of low crime rates: 1859\n",
      "Number of high crime rates: 1030\n"
     ]
    }
   ],
   "source": [
    "crime_rate.loc[crime_rate['rate']<=edge, 'rate'] = 0\n",
    "crime_rate.loc[crime_rate['rate']> edge, 'rate'] = 1\n",
    "display(crime_rate.head())\n",
    "print('Number of low crime rates:', len(crime_rate[crime_rate['rate']==0]))\n",
    "print('Number of high crime rates:', len(crime_rate[crime_rate['rate']==1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Training\n",
    "_**Train different models using data from the baseline visit**_\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Convert the neighborhood names to integers for the algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Dunbar-Southlands': 0, 'Fairview': 1, 'Grandview-Woodland': 2, 'Hastings-Sunrise': 3, 'Kensington-Cedar Cottage': 4, 'Kerrisdale': 5, 'Killarney': 6, 'Kitsilano': 7, 'Marpole': 8, 'Mount Pleasant': 9, 'Oakridge': 10, 'Renfrew-Collingwood': 11, 'Riley Park': 12, 'Shaughnessy': 13, 'South Cambie': 14, 'Strathcona': 15, 'Sunset': 16, 'Victoria-Fraserview': 17, 'West End': 18, 'West Point Grey': 19}\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "      <th>rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YEAR  MONTH  HOUR  NEIGHBOURHOOD  rate\n",
       "0  2006      1   0.0              1   1.0\n",
       "1  2006      1   0.0              3   1.0\n",
       "2  2006      1   0.0              4   0.0\n",
       "3  2006      1   0.0              5   1.0\n",
       "4  2006      1   0.0              6   1.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num2name = tot_popul_year['NEIGHBOURHOOD'].to_dict()\n",
    "name2num = {v: k for k, v in num2name.items()}\n",
    "print(name2num)\n",
    "num2name = tot_popul_year['NEIGHBOURHOOD'].to_dict()\n",
    "name2num = {v: k for k, v in num2name.items()}\n",
    "crime_rate = crime_rate.applymap(lambda s: name2num.get(s) if s in name2num else s)\n",
    "crime_rate.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the base-line data (2006) for training\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rate</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>HOUR</th>\n",
       "      <th>NEIGHBOURHOOD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rate  MONTH  HOUR  NEIGHBOURHOOD\n",
       "0   1.0      1   0.0              1\n",
       "1   1.0      1   0.0              3\n",
       "2   0.0      1   0.0              4\n",
       "3   1.0      1   0.0              5\n",
       "4   1.0      1   0.0              6"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_bl = crime_rate[crime_rate['YEAR']==2006][['rate','MONTH','HOUR','NEIGHBOURHOOD']]\n",
    "data_bl.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Choose X (independent variables) and y (dependent variables)\n",
    "Supervised learning models are designed to minimize error between their predictions of the target value and actuals, in the data they are given.  To prevent overfitting to a subset of the data, we will randomly split the data into 3 uneven groups.  The model will be trained on 70% of data, it will then be evaluated on 15% of data to yield an estimate of the accuracy we hope to have on \"new\" data, and 15% will be held back as a final testing dataset which will be used later on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score, train_test_split\n",
    "\n",
    "X = data_bl.drop('rate', axis=1)\n",
    "y = data_bl['rate']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating and training the model\n",
    "\n",
    "After setting training parameters, ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Multinomial Naive Bayes\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.6024390243902439\n",
      "\n",
      "\n",
      "\n",
      "Logistic Regression\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.6097560975609756\n",
      "\n",
      "\n",
      "\n",
      "Random Forest\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.7097560975609756\n",
      "\n",
      "\n",
      "\n",
      "SVC\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.6951219512195121\n",
      "\n",
      "\n",
      "\n",
      "Majority Voting\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAAD7CAYAAADJukfwAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAE3dJREFUeJzt3X2Y3XV55/H3mUkmCTEJSORhVyCCchu0FEMhCBiyF2hEW2mpu1Kl2CoELdvidi0sJDQgCEUWK7QrMiAibVl84GnFWrAKElHJiqCg5CYQw4MEFkzzhCEP5PSPc1JnKZmcmcx8zzm/vF/X9btyzm/OfOdOMvnMnfv3cGr1eh1JUhk97S5AknYkhq4kFWToSlJBhq4kFWToSlJBhq4kFWToSlJBhq4kFWToSlJBY0Zz8fNq4eVu+ncW1K9vdwnqSAfXtneFoWTOgnpu99cbDjtdSSpoVDtdSSqpG7pIQ1dSZXRDoHVDjZLUEjtdSSrI0JWkgtpyOsIQGbqSKsNOV5IKMnQlqaBuCLRuqFGSWmKnK0kFGbqSVJChK0kFGbqSVFA3BFo31ChJLbHTlaSCvCJNkgqy05WkggxdSSrI0JWkgroh0LqhRklqiZ2uJBVk6EpSQYauJBVk6EpSQb0jvF5EzAQuzszZEXEQ8DlgE/AIcHJmbo6IU4BTm/svyMzbBluzG34wSFJLeoawbUtEnAFcDYxv7loAfCIzjwTGAe+OiD2APwOOAOYAF0XEuG3VKEmVMJKhCzwGHD/g+f3AqyOiBkwCNgKHAvdk5vrMXAU8Chy4rRolqRJGMnQz80YawbrFEuBy4GFgd+AuYDKwasBr1gBTBlvXma6kyqgN4Y43ETEXmDtgV39m9g/yKZcBb8vMn0bEacClwO00ut4tJgErB/u6hq6kyuip1Vt+beYj/cBgIftyK4DVzcdP05jjLgI+GRHjacx5pwMPDbaIoSupMnpG996OJwM3RMQmYANwSmY+ExGXAwtpTC3mZeaLgy1Sq9db/8kwVOfVYvQWV9daUL++3SWoIx283ZH53bFvaDlzjty4pC2337XTlVQZQ5nptouhK6kyDF1JKmgoB9LaxdCVVBld0OgaupKqo6cLLvcydCVVRs3xgiSVM8rn6Y4IQ1dSZXj2giQVVMPxgiQV44E0SSrI83QlqSBnupJUUBdkrqErqTo8T1eSCnK8IEkF9fbY6UpSMV3Q6Bq6kqrD8cIOpGfMGN5zzYXsPO0/MmZcH3dfcAXP/exRfvfav6Jer/PcQ0v4+mnnQfPtkXbZb29OuOV/ccVv/E6bK1cpL720mfnzr+LnP19Ob28PF110KmvW/IoFCz5PX99Ypk/fh3nzTqKnG87w71AeSNuBHHjie1j3y5XcctIZTHj1zpx6/80888Bivj3/Mzz+nUW8+4rzeONxR7P4ln/mwBOPY+bpJ7HT1F3aXbYKuvPO+wC44YZzuffen3HRRX/Ps8+uYP78DzJjxv789V9/ma997Xscd9yRba60e3XDDW/8kTpCfvqVf+LOcy77t+ebN73Enge/ice/swiAR79xN/seczgA6/5lFdcedWJb6lT7HHPMIZx//skAPP3080ydOplnn13BjBn7AzBjxv7cd1+2s8SuV6u1vrVLS6EbEfdFxIURcfBoF9StNr7wKzasfYG+V03kP3/1cr49/zPUBvzNrl/zAuOmTAJgydfvYuOv1rWrVLXRmDG9nHnmFZx//heZM2cme+21G4sWPQzAnXf+iHXr1re5wu7WU6u3vLWtxhZf91Ya7+t+ckR8LyI+vbUXRsTciPhhRPxwRCrsIpNfuwcfvPM6fvJ3t/LQ/76N+ubN//axcZMm8uLK1W2sTp3i4os/yu23X8o551zNued+iCuvvJW5cz/FrrtOZpddJrW7vK5WmU4XmNjceoFxwO5be2Fm9mfmb2Xmb41AfV1j4m67cuId1/DPZ17CA1+4EYDl9/+MfY46FIDXHzuLJxbucD+HNMAttyzkyitvBWDChD5qtRp33XU/F154Kv39Z7By5VqOOOLNba6yu9V6ai1v7dLqgbTngAeBeZk5dxTr6VpvO/sjTNhlMrPO+RNmnfMnAPzT6Z/knZfPp7dvLM8/vJSfffX2NlepdnrHOw7hrLOu5AMf+ASbNm3i7LP/kJ6eGnPnfooJE/qYOfMAjjrqLe0us6vVuuAoVa1e3/ZsIyL2BOYA7wCmAvdl5lnb+rzzatH552+ouAX169tdgjrSwdvdfi6ftnfLmbPnsifa0u622uk+CzwK7A/sA0wbrYIkabhqYzr/nLFWQ3cxcDdwE3BuZm4YvZIkaXhqXXBJWquh+0bgWOBNwFjg1lGrSJKGqRtmuq2W+Engj4GNwAcj4tLRK0mShqkLzhlrtdOdlZlHAETEZcAPRq8kSRqeKnW6YyNiy2t7oAve51jSDqdK5+neANwTET8AZjafS1JH6eltdwXbNmjoRsRF/Lqr/QXwO8ADwG6jXJckDd0Id7ARMRO4ODNnR8QM4GvAkuaHr8jML0XEAuDdwCbgY5m5aLA1t9XpLh7wOJtfUJI60kgeH4uIM4A/BF5o7poBfDozLx3wmhnAUTQmAHsBNwKHDLbuoKGbmV/cjpolqagRntU+BhwP/F3z+cFARMRxNLrdjwFHAndkZh14IiLGRMRrMvO5rS3aBcf6JKk1tZ7Wt4F3RGxu/999ZTLzRhqnyW6xCPiLzJwFLAUWAJOBVQNeswaYMliNvnOEpMoYyhVpmdkP9A9h+Zszc+WWx8Df0LhQbOD9OCcBK1/+iQPZ6UqqjFpv69sw3B4RhzYfHw3cB9wDzImInojYG+jJzOcHW8ROV1JljPL5tx8F/jYiNgDPAHMzc3VELAS+T6OJPW2bNbZya8fh8taOeiXe2lGvbPtv7fjCrP1bzpyJdz/S0bd2lKTOV6G7jElSx+uGey8YupIqo6fXTleSimnnjWxaZehKqo7Oz1xDV1J1ONOVpIIcL0hSQV1wxpihK6k6qvQW7JLU+RwvSFJBHkiTpILsdCWpIDtdSSpoTOenrqErqTo6P3MNXUkV4kxXkgqy05Wkgux0Jamgzs9cQ1dShXj2giQV1PmZa+hKqhBnupJUjjcxl6SS7HQlqSA7XUkqyLMXJKmgzs9cQ1dShTjTlaSC7HQlqSA7XUkqyHcDlqSCHC9IUkEjPF6IiJnAxZk5OyIOAv4GeAlYD5yUmc9GxCnAqcAm4ILMvG3QEke0Qklqp55a69s2RMQZwNXA+Oauy4A/zczZwE3AmRGxB/BnwBHAHOCiiBg3aInD/91JUofpGcK2bY8Bxw94fkJmPtB8PAZ4ETgUuCcz12fmKuBR4MDBFh3V8cJfLnnvaC6vLlW/+7J2l6AOVJt13fYvMoTxQkTMBeYO2NWfmf1bnmTmjRExbcDz5c3POxz4r8AsGt3tqgFrrAGmDPZ1nelKqo7e1kO3GbD923zhABHxPmAe8O7MfC4iVgOTBrxkErBysDUMXUnVMYpnjEXEiTQOmM3OzBXN3YuAT0bEeGAcMB14aLB1DF1J1VEbndSNiF7gcuAJ4KaIAPhOZi6IiMuBhTQmxfMy88XB1jJ0JVXHCGduZi4DDms+ffVWXnMVcFWraxq6kqpjlDrdkWToSqqOLjgJ1tCVVB3e8EaSCnK8IEkFdX7mGrqSKsROV5IK8kCaJBXkgTRJKsjxgiSV0wWZa+hKqpAuSF1DV1J1dH7mGrqSKsQDaZJUkKErSQV1fuYaupIqxANpklRQ52euoSupQpzpSlJBnZ+5hq6kCrHTlaSCPJAmSQV1fuYaupIqxPGCJBXkeEGSCurp/LeOMHQlVUfN0JWkcpzpSlJBznQlqSDHC5JUkJ2uJBXU29vuCrbJ0JVUHXa6klTQCIVuRIwDvgDsC6wGTgN2BS4DNgF3ZOZ5w1m786fOktSqWk/r2+BOAdZm5mHAnwJ/C3wOeD9wJDAzImYMp0RDV1J19NRa3wZ3APANgMxM4BBgXGY+lpl14Hbg6OGU6HhBUnX0tH4gLSLmAnMH7OrPzP7m4weA346IW4CZwBTgsQGvXUNj9DBkhq6k6hjCTLcZsP1b+fA1wHTgTuAe4MfAxAEfnwSsHE6JjhckVcfIjRcOAb6bmbOBm4FHgA0RsV9E1IA5wMLhlGinK6k6Ru6KtCXA+RHxcRod7YeBvYF/AHppnL1w73AWNnQlVccInTKWmc8Dx7xs99PAYdu7tqErqTq8OEKSCvIyYEkqyE5XkgoydCWpIO+nu2O66ZvLuPlbywDYsGEzDy9dyac+fihXfSUZ01vjrQftxsdOenN7i1RxGzZu5qxrl/LUcy8ycUIvf/n+17F8xXo+c8tTjO2t8epJY7j4Q/sxYVznzyU7lm/Xs2M6/u3TOP7t0wD4xGfv5/i3T+PKLy3mkr84lP32msQHzriLXLaKmDalvYWqqC8v/H/sNK6HL539ZpY+s47zr1/GL365nr8/4wCmTh7LpTc9wVe++xwnHb1Hu0vtXl0wXuj8XryLPbhkBUueWMX7jt2X6fvtzKo1G9i4qc76DZvp7YKfyBpZjy1fx6w37wzAvntMYOkz67ju49OZOnksAC+9BOPG+k9yu/T0tr61SUudbkT0Am8BdtqyLzPvHq2iqqL/S4s57Q8OAGD/fSbzkfPuYedJfcTrprDvaye1uTqV9sa9JnLXT1ZyzFt24cdL1/Lsv2xg12bgfvNHK7g3V3P67762zVV2uS7odFsdL3wV2Bl4pvm8Drxi6A68c8/ir793e+vrWqvXbmDpU2s47Dd3Y/XaDfR/Jbnts+9g96kTuOSan/CFmx/hw78f7S5TBf3+Ea9h6fJ1nPQ/H2bG6yfxpn0m0ttT49pvLuf2+1Zw9elhp7u9ejr/z6/V0J2amW9r5YUD79xTf3RefbiFdbsfPvQ8bz1odwDGj+tlp/Fj2GlC44/7NbuMZ8Xq9e0sT23w4LK1zHj9JM563z48uGwtTz73Ip/7+i/46eMv8IU/n874vs4PjM5XnU738YjYKzOfHNVqKuTnv1jDXns07gTXN7aXM08+kA/Pv5u+vl4mTxzLRf/tkDZXqNKm7Taey299imvuWM7knXo598TX8c55P+aAvXfilMsWA/CuQ3blD2bv3uZKu1gXjBdq9frWm9GIWE5jlDAeeBWwovm8npn/YVuL78idrgbxtD+79e/VZl233YlZf3R+y5lTe/0FbUnoQTvdzNyzVCGStN26oNNt9eyFb79s10bgSeCCzFw20kVJ0rB0wRVprVb4OHA98FHgOmAt8H3g86NUlyQNQ20IW3u0Grp7Z+bV2XAtMDkzP49XtEnqJLVa61ubtBqafRExh0Z3ezgwNiL2ZcDFEpLUfp0/Xmg1dP8IuAT4DPAg8CEab1vx56NTliQNQ7dfHBERYzJzE42DZifQGITUATLz+tEvT5KGovvPXrgOeD+QNMO2qQ7sN1pFSdKwdPvZC5n5/ubDC4F1/PqwX+f/ziTteCp0IO0jwLv49Q1vJKkDdf94YYvnM/PxUa1EkrZXF4wXtnUg7cLmw76IuB34Eb8+kHb2KNcmSUNS6/bQpXEAbeCvktS5uj10M/OLpQqRpO1XnZmuJHW+qtxlTJK6QrePFySpqxi6klSQoStJJTnTlaRyRvBAWkScBbwH6AM+C3wHuJbGtQoPAadl5uahrtv5vbgktaxnCNvWRcRsGvcOPwI4CtgL+DQwPzPfRqOlPm64FUpSNYzcDW/m0Lh3+M3A14DbgINpdLsA3wCOGU6JjhckVUetd6RWmgrsA/w28Drg/wA9mbnlFrdrgCnDWdjQlVQdQ5jpRsRcYO6AXf2Z2d98/EtgcWZuADIiXqQxYthiErByOCUaupIqpPXQbQZs/1Y+/F3g9Ij4NLAnMBH4VkTMzsy7gGOBO4dToaErqTpG6DzdzLwtImYBi2gc+zoN+DlwVUT0AQ8DXx3O2oaupOoYwVPGMvOMV9h91Paua+hKqhAvjpCkckbu7IVRY+hKqg5v7ShJJXX+9V6GrqTqsNOVpIK8taMkFWToSlJJhq4kleNMV5JKstOVpHLsdCWpIENXkgryMmBJKslOV5LK8TxdSSrJTleSyrHTlaSS7HQlqZwez16QpILsdCWpHC+OkKSSPJAmSeXY6UpSQV1wGXCtXq+3u4YdQkTMzcz+dtehzuL3xY6n8wcg1TG33QWoI/l9sYMxdCWpIENXkgoydMtxbqdX4vfFDsYDaZJUkJ2uJBVk6I6giPijiPirdtehzvBK3w8RcUNE9A3yOc+MfmVqJy+OkArKzBPaXYPay9AdBRHx34ETgE3A3cDZwGJgOvAa4ClgN2At8P3MnNGmUjX6DouIO2j8vV9B43vhjcBrgWuBjcDjwLTMnA2Mi4jrgb2BXwLvzcyNbahbo8Txwsh7A/BfgMOb2xuAY4GFwFuBdwIPAUc3tzvaU6YK2QjMAX4P+NiA/ZcAF2bmfwLuGbD/VcDZmXkkMAV4S6lCVYahO/IOAn6QmRszs04jbN8E3AS8i8Y/wHnA24H3ADe2q1AV8aPm98EzwE4D9k8Hvtd8vHDA/hWZuaz5+OWfowowdEfeA8DMiBgTETVgFvAI8E3gKGAq8I/AwcBBmfl/21apStjaOZkP0fifD8BhLbxeFWHojrwlwJdp/JdxEbAMuCUz1wNP0uh8NgMJ3NuuItV2ZwL/IyK+ReN/PM5tdxBeHCG1QUR8ALg3Mx+NiJOBwzPzQ+2uS6PPsxek9ngSuCEifgW8BHy4zfWoEDtdSSrIma4kFWToSlJBhq4kFWToSlJBhq4kFWToSlJB/wpAEoVR24tSLwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy = 0.7146341463414634\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import LinearSVC, SVC\n",
    "\n",
    "\n",
    "# Models/classifiers\n",
    "mnb = MultinomialNB()\n",
    "lr  = LogisticRegression(solver='lbfgs', multi_class = 'auto')\n",
    "rf  = RandomForestClassifier(n_estimators = 50, criterion = 'entropy', random_state = 0)\n",
    "svc = SVC(gamma='auto', probability=True)\n",
    "mv  = VotingClassifier(estimators=[\n",
    "        ('mnb', mnb),\n",
    "        ('lr', lr),\n",
    "        ('rf', rf),\n",
    "        ('svc', svc)\n",
    "        ],\n",
    "        voting='soft')\n",
    "\n",
    "classifiers = {'Multinomial Naive Bayes' : mnb,\n",
    "               'Logistic Regression'     : lr,\n",
    "               'Random Forest'           : rf,\n",
    "               'SVC'                     : svc,\n",
    "               'Majority Voting'         : mv,\n",
    "              }\n",
    "\n",
    "\n",
    "for model_name, model in classifiers.items():\n",
    "    print(model_name)\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "    model.fit(X_train, y_train)\n",
    "    y_preds = model.predict(X_test)\n",
    "    # y_preds = model.predict_proba(X_test)[:,1]\n",
    "\n",
    "    confus_matrix = pd.crosstab(index=y_test, columns=np.round(y_preds), rownames=['actuals'], colnames=['predictions'])\n",
    "    confus_matrix.index = ['low','high']\n",
    "    confus_matrix.columns = ['low','high']\n",
    "    sns.heatmap(confus_matrix, annot=True, fmt=\"d\", cmap=\"YlOrRd\");\n",
    "    plt.show()\n",
    "    \n",
    "    print('Accuracy =', np.diag(confus_matrix).sum() / float(confus_matrix.sum().sum()))\n",
    "    print('\\n\\n')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1., 0., 0., 0., 0., 1., 0., 0., 0., 1.])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Making the predictions\n",
    "y_preds = model.predict(X_test)\n",
    "y_preds[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted</th>\n",
       "      <th>actual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   predicted  actual\n",
       "0        1.0     1.0\n",
       "1        0.0     0.0\n",
       "2        0.0     1.0\n",
       "3        0.0     1.0\n",
       "4        0.0     0.0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds_df = pd.DataFrame([y_preds, y_test]).T\n",
    "preds_df = preds_df.rename(columns = {0: 'predicted', 1: 'actual'})\n",
    "preds_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model comparison using ROC curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "colors = {\n",
    "    'Multinomial Naive Bayes' : 'aqua',\n",
    "    'Logistic Regression'     : 'cornflowerblue',\n",
    "    'Random Forest'           : 'darkorange',\n",
    "    'SVC'                     : 'green',\n",
    "    'Majority Voting'         : 'red',\n",
    "}\n",
    "\n",
    "for model_name, model in classifiers.items():\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "    model.fit(X_train, y_train)\n",
    "    #y_preds = model.predict(X_test)\n",
    "    y_preds = model.predict_proba(X_test)[:,1]\n",
    "    fpr, tpr, _ = roc_curve(y_test.values.ravel(), y_preds)\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "\n",
    "    plt.plot(fpr,\n",
    "             tpr,\n",
    "             color=colors[model_name], lw=2,\n",
    "             label='ROC curve of model {0} (area = {1:0.2f})'.format(model_name, roc_auc)\n",
    "            )\n",
    "    \n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('1 - False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC curve - models comparison')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding most predictive features\n",
    "### (from the Random Forest Classifier)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NEIGHBOURHOOD</td>\n",
       "      <td>0.55575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HOUR</td>\n",
       "      <td>0.274862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MONTH</td>\n",
       "      <td>0.169388</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         feature importance\n",
       "2  NEIGHBOURHOOD    0.55575\n",
       "1           HOUR   0.274862\n",
       "0          MONTH   0.169388"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_df = pd.DataFrame([X_test.columns, rf.feature_importances_]).T\n",
    "features_df = features_df.rename(columns={0: 'feature', 1: 'importance'})\n",
    "features_df = features_df.sort_values('importance', ascending=False)\n",
    "features_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
